// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: moego/business/agreement/v1/agreement_service.proto

package agreementpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AgreementService_GetAgreement_FullMethodName         = "/moego.business.agreement.v1.AgreementService/GetAgreement"
	AgreementService_ListAgreements_FullMethodName       = "/moego.business.agreement.v1.AgreementService/ListAgreements"
	AgreementService_GetAgreementSignLink_FullMethodName = "/moego.business.agreement.v1.AgreementService/GetAgreementSignLink"
)

// AgreementServiceClient is the client API for AgreementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AgreementServiceClient interface {
	// GetAgreement
	GetAgreement(ctx context.Context, in *GetAgreementRequest, opts ...grpc.CallOption) (*Agreement, error)
	// ListAgreement
	ListAgreements(ctx context.Context, in *ListAgreementsRequest, opts ...grpc.CallOption) (*ListAgreementsResponse, error)
	// GetUnsignedAgreementLink
	GetAgreementSignLink(ctx context.Context, in *GetAgreementSignURLRequest, opts ...grpc.CallOption) (*GetAgreementSignURLResponse, error)
}

type agreementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAgreementServiceClient(cc grpc.ClientConnInterface) AgreementServiceClient {
	return &agreementServiceClient{cc}
}

func (c *agreementServiceClient) GetAgreement(ctx context.Context, in *GetAgreementRequest, opts ...grpc.CallOption) (*Agreement, error) {
	out := new(Agreement)
	err := c.cc.Invoke(ctx, AgreementService_GetAgreement_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) ListAgreements(ctx context.Context, in *ListAgreementsRequest, opts ...grpc.CallOption) (*ListAgreementsResponse, error) {
	out := new(ListAgreementsResponse)
	err := c.cc.Invoke(ctx, AgreementService_ListAgreements_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agreementServiceClient) GetAgreementSignLink(ctx context.Context, in *GetAgreementSignURLRequest, opts ...grpc.CallOption) (*GetAgreementSignURLResponse, error) {
	out := new(GetAgreementSignURLResponse)
	err := c.cc.Invoke(ctx, AgreementService_GetAgreementSignLink_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AgreementServiceServer is the server API for AgreementService service.
// All implementations must embed UnimplementedAgreementServiceServer
// for forward compatibility
type AgreementServiceServer interface {
	// GetAgreement
	GetAgreement(context.Context, *GetAgreementRequest) (*Agreement, error)
	// ListAgreement
	ListAgreements(context.Context, *ListAgreementsRequest) (*ListAgreementsResponse, error)
	// GetUnsignedAgreementLink
	GetAgreementSignLink(context.Context, *GetAgreementSignURLRequest) (*GetAgreementSignURLResponse, error)
	mustEmbedUnimplementedAgreementServiceServer()
}

// UnimplementedAgreementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAgreementServiceServer struct {
}

func (UnimplementedAgreementServiceServer) GetAgreement(context.Context, *GetAgreementRequest) (*Agreement, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgreement not implemented")
}
func (UnimplementedAgreementServiceServer) ListAgreements(context.Context, *ListAgreementsRequest) (*ListAgreementsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgreements not implemented")
}
func (UnimplementedAgreementServiceServer) GetAgreementSignLink(context.Context, *GetAgreementSignURLRequest) (*GetAgreementSignURLResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAgreementSignLink not implemented")
}
func (UnimplementedAgreementServiceServer) mustEmbedUnimplementedAgreementServiceServer() {}

// UnsafeAgreementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AgreementServiceServer will
// result in compilation errors.
type UnsafeAgreementServiceServer interface {
	mustEmbedUnimplementedAgreementServiceServer()
}

func RegisterAgreementServiceServer(s grpc.ServiceRegistrar, srv AgreementServiceServer) {
	s.RegisterService(&AgreementService_ServiceDesc, srv)
}

func _AgreementService_GetAgreement_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgreementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).GetAgreement(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgreementService_GetAgreement_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).GetAgreement(ctx, req.(*GetAgreementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_ListAgreements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAgreementsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).ListAgreements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgreementService_ListAgreements_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).ListAgreements(ctx, req.(*ListAgreementsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgreementService_GetAgreementSignLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAgreementSignURLRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgreementServiceServer).GetAgreementSignLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AgreementService_GetAgreementSignLink_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgreementServiceServer).GetAgreementSignLink(ctx, req.(*GetAgreementSignURLRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AgreementService_ServiceDesc is the grpc.ServiceDesc for AgreementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AgreementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moego.business.agreement.v1.AgreementService",
	HandlerType: (*AgreementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAgreement",
			Handler:    _AgreementService_GetAgreement_Handler,
		},
		{
			MethodName: "ListAgreements",
			Handler:    _AgreementService_ListAgreements_Handler,
		},
		{
			MethodName: "GetAgreementSignLink",
			Handler:    _AgreementService_GetAgreementSignLink_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moego/business/agreement/v1/agreement_service.proto",
}
