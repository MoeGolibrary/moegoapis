// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: moego/business/customer/v1/pet_code_service.proto

package customerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PetCodeService_CreatePetCode_FullMethodName = "/moego.business.customer.v1.PetCodeService/CreatePetCode"
	PetCodeService_ListPetCodes_FullMethodName  = "/moego.business.customer.v1.PetCodeService/ListPetCodes"
)

// PetCodeServiceClient is the client API for PetCodeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetCodeServiceClient interface {
	// Create a petCode
	CreatePetCode(ctx context.Context, in *CreatePetCodeRequest, opts ...grpc.CallOption) (*CreatePetCodeResponse, error)
	// PetCodeList
	ListPetCodes(ctx context.Context, in *ListPetCodeRequest, opts ...grpc.CallOption) (*ListPetCodeResponse, error)
}

type petCodeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetCodeServiceClient(cc grpc.ClientConnInterface) PetCodeServiceClient {
	return &petCodeServiceClient{cc}
}

func (c *petCodeServiceClient) CreatePetCode(ctx context.Context, in *CreatePetCodeRequest, opts ...grpc.CallOption) (*CreatePetCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePetCodeResponse)
	err := c.cc.Invoke(ctx, PetCodeService_CreatePetCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petCodeServiceClient) ListPetCodes(ctx context.Context, in *ListPetCodeRequest, opts ...grpc.CallOption) (*ListPetCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPetCodeResponse)
	err := c.cc.Invoke(ctx, PetCodeService_ListPetCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetCodeServiceServer is the server API for PetCodeService service.
// All implementations must embed UnimplementedPetCodeServiceServer
// for forward compatibility
type PetCodeServiceServer interface {
	// Create a petCode
	CreatePetCode(context.Context, *CreatePetCodeRequest) (*CreatePetCodeResponse, error)
	// PetCodeList
	ListPetCodes(context.Context, *ListPetCodeRequest) (*ListPetCodeResponse, error)
	mustEmbedUnimplementedPetCodeServiceServer()
}

// UnimplementedPetCodeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPetCodeServiceServer struct {
}

func (UnimplementedPetCodeServiceServer) CreatePetCode(context.Context, *CreatePetCodeRequest) (*CreatePetCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePetCode not implemented")
}
func (UnimplementedPetCodeServiceServer) ListPetCodes(context.Context, *ListPetCodeRequest) (*ListPetCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPetCodes not implemented")
}
func (UnimplementedPetCodeServiceServer) mustEmbedUnimplementedPetCodeServiceServer() {}

// UnsafePetCodeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetCodeServiceServer will
// result in compilation errors.
type UnsafePetCodeServiceServer interface {
	mustEmbedUnimplementedPetCodeServiceServer()
}

func RegisterPetCodeServiceServer(s grpc.ServiceRegistrar, srv PetCodeServiceServer) {
	s.RegisterService(&PetCodeService_ServiceDesc, srv)
}

func _PetCodeService_CreatePetCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetCodeServiceServer).CreatePetCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetCodeService_CreatePetCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetCodeServiceServer).CreatePetCode(ctx, req.(*CreatePetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetCodeService_ListPetCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetCodeServiceServer).ListPetCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetCodeService_ListPetCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetCodeServiceServer).ListPetCodes(ctx, req.(*ListPetCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetCodeService_ServiceDesc is the grpc.ServiceDesc for PetCodeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetCodeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moego.business.customer.v1.PetCodeService",
	HandlerType: (*PetCodeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePetCode",
			Handler:    _PetCodeService_CreatePetCode_Handler,
		},
		{
			MethodName: "ListPetCodes",
			Handler:    _PetCodeService_ListPetCodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moego/business/customer/v1/pet_code_service.proto",
}
