// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: moego/business/customer/v1/pet_service.proto

package customerpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	PetService_CreatePet_FullMethodName      = "/moego.business.customer.v1.PetService/CreatePet"
	PetService_AppendPetCodes_FullMethodName = "/moego.business.customer.v1.PetService/AppendPetCodes"
	PetService_AppendPetNotes_FullMethodName = "/moego.business.customer.v1.PetService/AppendPetNotes"
	PetService_ListPetNotes_FullMethodName   = "/moego.business.customer.v1.PetService/ListPetNotes"
)

// PetServiceClient is the client API for PetService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PetServiceClient interface {
	// Create a pet
	CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetResponse, error)
	// Append pet codes to a pet
	AppendPetCodes(ctx context.Context, in *AppendPetCodesRequest, opts ...grpc.CallOption) (*AppendPetCodesResponse, error)
	// Append notes to a pet
	AppendPetNotes(ctx context.Context, in *AppendPetNotesRequest, opts ...grpc.CallOption) (*AppendPetNotesResponse, error)
	// List Pet Notes
	ListPetNotes(ctx context.Context, in *ListPetNotesRequest, opts ...grpc.CallOption) (*ListPetNotesResponse, error)
}

type petServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPetServiceClient(cc grpc.ClientConnInterface) PetServiceClient {
	return &petServiceClient{cc}
}

func (c *petServiceClient) CreatePet(ctx context.Context, in *CreatePetRequest, opts ...grpc.CallOption) (*CreatePetResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreatePetResponse)
	err := c.cc.Invoke(ctx, PetService_CreatePet_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) AppendPetCodes(ctx context.Context, in *AppendPetCodesRequest, opts ...grpc.CallOption) (*AppendPetCodesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendPetCodesResponse)
	err := c.cc.Invoke(ctx, PetService_AppendPetCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) AppendPetNotes(ctx context.Context, in *AppendPetNotesRequest, opts ...grpc.CallOption) (*AppendPetNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AppendPetNotesResponse)
	err := c.cc.Invoke(ctx, PetService_AppendPetNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *petServiceClient) ListPetNotes(ctx context.Context, in *ListPetNotesRequest, opts ...grpc.CallOption) (*ListPetNotesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPetNotesResponse)
	err := c.cc.Invoke(ctx, PetService_ListPetNotes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PetServiceServer is the server API for PetService service.
// All implementations must embed UnimplementedPetServiceServer
// for forward compatibility
type PetServiceServer interface {
	// Create a pet
	CreatePet(context.Context, *CreatePetRequest) (*CreatePetResponse, error)
	// Append pet codes to a pet
	AppendPetCodes(context.Context, *AppendPetCodesRequest) (*AppendPetCodesResponse, error)
	// Append notes to a pet
	AppendPetNotes(context.Context, *AppendPetNotesRequest) (*AppendPetNotesResponse, error)
	// List Pet Notes
	ListPetNotes(context.Context, *ListPetNotesRequest) (*ListPetNotesResponse, error)
	mustEmbedUnimplementedPetServiceServer()
}

// UnimplementedPetServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPetServiceServer struct {
}

func (UnimplementedPetServiceServer) CreatePet(context.Context, *CreatePetRequest) (*CreatePetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePet not implemented")
}
func (UnimplementedPetServiceServer) AppendPetCodes(context.Context, *AppendPetCodesRequest) (*AppendPetCodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendPetCodes not implemented")
}
func (UnimplementedPetServiceServer) AppendPetNotes(context.Context, *AppendPetNotesRequest) (*AppendPetNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendPetNotes not implemented")
}
func (UnimplementedPetServiceServer) ListPetNotes(context.Context, *ListPetNotesRequest) (*ListPetNotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPetNotes not implemented")
}
func (UnimplementedPetServiceServer) mustEmbedUnimplementedPetServiceServer() {}

// UnsafePetServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PetServiceServer will
// result in compilation errors.
type UnsafePetServiceServer interface {
	mustEmbedUnimplementedPetServiceServer()
}

func RegisterPetServiceServer(s grpc.ServiceRegistrar, srv PetServiceServer) {
	s.RegisterService(&PetService_ServiceDesc, srv)
}

func _PetService_CreatePet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).CreatePet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetService_CreatePet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).CreatePet(ctx, req.(*CreatePetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_AppendPetCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendPetCodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).AppendPetCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetService_AppendPetCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).AppendPetCodes(ctx, req.(*AppendPetCodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_AppendPetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendPetNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).AppendPetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetService_AppendPetNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).AppendPetNotes(ctx, req.(*AppendPetNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PetService_ListPetNotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPetNotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PetServiceServer).ListPetNotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PetService_ListPetNotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PetServiceServer).ListPetNotes(ctx, req.(*ListPetNotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PetService_ServiceDesc is the grpc.ServiceDesc for PetService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PetService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "moego.business.customer.v1.PetService",
	HandlerType: (*PetServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePet",
			Handler:    _PetService_CreatePet_Handler,
		},
		{
			MethodName: "AppendPetCodes",
			Handler:    _PetService_AppendPetCodes_Handler,
		},
		{
			MethodName: "AppendPetNotes",
			Handler:    _PetService_AppendPetNotes_Handler,
		},
		{
			MethodName: "ListPetNotes",
			Handler:    _PetService_ListPetNotes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "moego/business/customer/v1/pet_service.proto",
}
