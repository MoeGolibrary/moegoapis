// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: moego/business/discount/v1/discount_service.proto

package discountpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiscountRequestMultiError, or nil if none found.
func (m *CreateDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetDiscount()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateDiscountRequestValidationError{
					field:  "Discount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateDiscountRequestValidationError{
					field:  "Discount",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDiscount()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateDiscountRequestValidationError{
				field:  "Discount",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateDiscountRequestMultiError(errors)
	}

	return nil
}

// CreateDiscountRequestMultiError is an error wrapping multiple validation
// errors returned by CreateDiscountRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiscountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiscountRequestMultiError) AllErrors() []error { return m }

// CreateDiscountRequestValidationError is the validation error returned by
// CreateDiscountRequest.Validate if the designated constraints aren't met.
type CreateDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiscountRequestValidationError) ErrorName() string {
	return "CreateDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiscountRequestValidationError{}

// Validate checks the field values on GetDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDiscountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiscountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetDiscountRequestMultiError, or nil if none found.
func (m *GetDiscountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiscountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	if len(errors) > 0 {
		return GetDiscountRequestMultiError(errors)
	}

	return nil
}

// GetDiscountRequestMultiError is an error wrapping multiple validation errors
// returned by GetDiscountRequest.ValidateAll() if the designated constraints
// aren't met.
type GetDiscountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiscountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiscountRequestMultiError) AllErrors() []error { return m }

// GetDiscountRequestValidationError is the validation error returned by
// GetDiscountRequest.Validate if the designated constraints aren't met.
type GetDiscountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiscountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiscountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiscountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiscountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiscountRequestValidationError) ErrorName() string {
	return "GetDiscountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDiscountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiscountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiscountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiscountRequestValidationError{}

// Validate checks the field values on ListDiscountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDiscountsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiscountsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDiscountsRequestMultiError, or nil if none found.
func (m *ListDiscountsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiscountsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListDiscountsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListDiscountsRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListDiscountsRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListDiscountsRequestMultiError(errors)
	}

	return nil
}

// ListDiscountsRequestMultiError is an error wrapping multiple validation
// errors returned by ListDiscountsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListDiscountsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiscountsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiscountsRequestMultiError) AllErrors() []error { return m }

// ListDiscountsRequestValidationError is the validation error returned by
// ListDiscountsRequest.Validate if the designated constraints aren't met.
type ListDiscountsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiscountsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiscountsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiscountsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiscountsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiscountsRequestValidationError) ErrorName() string {
	return "ListDiscountsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListDiscountsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiscountsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiscountsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiscountsRequestValidationError{}

// Validate checks the field values on ListDiscountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListDiscountsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiscountsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListDiscountsResponseMultiError, or nil if none found.
func (m *ListDiscountsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiscountsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	for idx, item := range m.GetDiscounts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDiscountsResponseValidationError{
						field:  fmt.Sprintf("Discounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDiscountsResponseValidationError{
						field:  fmt.Sprintf("Discounts[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDiscountsResponseValidationError{
					field:  fmt.Sprintf("Discounts[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDiscountsResponseMultiError(errors)
	}

	return nil
}

// ListDiscountsResponseMultiError is an error wrapping multiple validation
// errors returned by ListDiscountsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListDiscountsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiscountsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiscountsResponseMultiError) AllErrors() []error { return m }

// ListDiscountsResponseValidationError is the validation error returned by
// ListDiscountsResponse.Validate if the designated constraints aren't met.
type ListDiscountsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiscountsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiscountsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiscountsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiscountsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiscountsResponseValidationError) ErrorName() string {
	return "ListDiscountsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListDiscountsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiscountsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiscountsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiscountsResponseValidationError{}
