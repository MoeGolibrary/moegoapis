// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: moego/business/discount/v1/discount.proto

package discountpb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Discount with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Discount) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Discount with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DiscountMultiError, or nil
// if none found.
func (m *Discount) ValidateAll() error {
	return m.validate(true)
}

func (m *Discount) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetValidPeriod()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "ValidPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "ValidPeriod",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValidPeriod()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountValidationError{
				field:  "ValidPeriod",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetLimitation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "Limitation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "Limitation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetLimitation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountValidationError{
				field:  "Limitation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetSettings()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DiscountValidationError{
					field:  "Settings",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSettings()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DiscountValidationError{
				field:  "Settings",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch v := m.Value.(type) {
	case *Discount_Amount:
		if v == nil {
			err := DiscountValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetAmount()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DiscountValidationError{
						field:  "Amount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DiscountValidationError{
						field:  "Amount",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetAmount()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DiscountValidationError{
					field:  "Amount",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *Discount_Percentage:
		if v == nil {
			err := DiscountValidationError{
				field:  "Value",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for Percentage
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return DiscountMultiError(errors)
	}

	return nil
}

// DiscountMultiError is an error wrapping multiple validation errors returned
// by Discount.ValidateAll() if the designated constraints aren't met.
type DiscountMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountMultiError) AllErrors() []error { return m }

// DiscountValidationError is the validation error returned by
// Discount.Validate if the designated constraints aren't met.
type DiscountValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountValidationError) ErrorName() string { return "DiscountValidationError" }

// Error satisfies the builtin error interface
func (e DiscountValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscount.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountValidationError{}

// Validate checks the field values on DiscountLimitation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DiscountLimitation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscountLimitation with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscountLimitationMultiError, or nil if none found.
func (m *DiscountLimitation) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscountLimitation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MaxRedeemTimes

	// no validation rules for RedeemOncePerCustomer

	if len(errors) > 0 {
		return DiscountLimitationMultiError(errors)
	}

	return nil
}

// DiscountLimitationMultiError is an error wrapping multiple validation errors
// returned by DiscountLimitation.ValidateAll() if the designated constraints
// aren't met.
type DiscountLimitationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountLimitationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountLimitationMultiError) AllErrors() []error { return m }

// DiscountLimitationValidationError is the validation error returned by
// DiscountLimitation.Validate if the designated constraints aren't met.
type DiscountLimitationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountLimitationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountLimitationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountLimitationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountLimitationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountLimitationValidationError) ErrorName() string {
	return "DiscountLimitationValidationError"
}

// Error satisfies the builtin error interface
func (e DiscountLimitationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscountLimitation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountLimitationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountLimitationValidationError{}

// Validate checks the field values on DiscountSettings with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DiscountSettings) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DiscountSettings with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DiscountSettingsMultiError, or nil if none found.
func (m *DiscountSettings) ValidateAll() error {
	return m.validate(true)
}

func (m *DiscountSettings) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AutoApplyOnEligibleAppointment

	// no validation rules for AllowForOnlineBooking

	if len(errors) > 0 {
		return DiscountSettingsMultiError(errors)
	}

	return nil
}

// DiscountSettingsMultiError is an error wrapping multiple validation errors
// returned by DiscountSettings.ValidateAll() if the designated constraints
// aren't met.
type DiscountSettingsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DiscountSettingsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DiscountSettingsMultiError) AllErrors() []error { return m }

// DiscountSettingsValidationError is the validation error returned by
// DiscountSettings.Validate if the designated constraints aren't met.
type DiscountSettingsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DiscountSettingsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DiscountSettingsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DiscountSettingsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DiscountSettingsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DiscountSettingsValidationError) ErrorName() string { return "DiscountSettingsValidationError" }

// Error satisfies the builtin error interface
func (e DiscountSettingsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDiscountSettings.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DiscountSettingsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DiscountSettingsValidationError{}
